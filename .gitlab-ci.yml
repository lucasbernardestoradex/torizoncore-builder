include:
  - "/tests/integration/aval/aval-tests.yml"

# TODO: GitLab's documentation recommends specifying a version:
#       See https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-docker-in-docker
#       Also in the services attribute.
image: docker:latest

variables:
  RELEASE_TYPE:
    value: "official"
    description: "Type of pipeline to run. Allowed values: 'official', 'early-access' or 'internal'."
  # Variables defined in schedule pipelines has more precedente than this defined in gitlab-ci.yml. So,
  # RUNNER_TAG defined in schedule pipeline will overwrite this variable. This one is useful for commit
  # pipelines.
  RUNNER_TAG: ""

  DEBIAN_RELEASE: "bullseye-slim"
  # Pipeline Settings
  GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_PATH
  GET_SOURCES_ATTEMPTS: 3
  # Container version:
  TORIZONCORE_BUILDER_MAJOR: "3"
  TORIZONCORE_BUILDER_MINOR: "12"
  TORIZONCORE_BUILDER_PATCH: "0"
  # This should be set by docker image already, just to be sure...
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  # Use overlayfs driver for better performance
  DOCKER_DRIVER: overlay2
  DOCKER_BUILDKIT: 1
  GITLAB_DOCKERREGISTRY_SUFFIX: ${CI_COMMIT_REF_SLUG}-${CI_PIPELINE_ID}
  GITLAB_DOCKERREGISTRY_SUFFIX_LATEST: ${CI_COMMIT_REF_SLUG}-latest
  # Common Torizon .wic/.img images:
  TEST_IMAGES_TC_COMMON_VERSION: "6.6.0-common"
  TEST_IMAGE_TC_COMMON_INTEL: "torizon-core-common-docker-dev-intel-corei7-64-20240226043251.rootfs.wic"
  TEST_IMAGE_TC_COMMON_RASPI4: "torizon-core-common-docker-dev-v6.6.0-common-raspberrypi4-64.img"
  # TC custom image parameters
  INTERNAL_ARTIFACTORY_URL: "" # "https://artifactory-horw.int.toradex.com/artifactory"
  ARTIFACTORY_SRC_REPO: "" # "devtorizoncore-oe-prerelease-horw"
  BUILD_DISTRO: "" # "torizon-upstream"
  BUILD_MACHINE: "" # "colibri-imx6"
  BUILD_MANIFEST_BRANCH: "" # "dunfell-5.x.y"
  BUILD_PIPELINETYPE: "" # "nightly"
  BUILD_RECIPE: "" # "torizon-core-docker""
  DISTRO_VERSION: "" # "5.7.3-devel-20230502+build.25"
  MATRIX_BUILD_NUMBER: "" # "25""
  # Set to "echo" for dry running specific actions:
  D: ""        # deployment actions
  T: ""        # test actions
  B: ""        # build actions

services:
  - name: docker:dind

test-avahi-installed:
  script:
    - docker run -it --rm --privileged --network=host debian:latest bash -c "\
      apt update && apt install -y avahi-daemon avahi-utils dbus && \
      mkdir -p /run/dbus && \
      dbus-uuidgen > /var/lib/dbus/machine-id && \
      dbus-daemon --system && \
      avahi-daemon --daemonize --no-chroot && \
      avahi-browse -a -t"
